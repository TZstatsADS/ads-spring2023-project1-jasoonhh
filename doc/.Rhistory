library(dplyr)
library(ggplot2)
library(beeswarm)
library(RColorBrewer)
library(data.table)
library(RColorBrewer)
library(patchwork)
library(tm)
library(tidytext)
library(wordcloud)
library(forcats)
df<-read.csv("~/philosophy_data.csv")
Aristotle<-df%>%filter(df$school=="aristotle")
Plato<-df%>%filter(df$school=="plato")
df$word_count=lengths(gregexpr("\\W+", df$sentence_str))
df$school_category=ifelse(df$school=="aristotle"|df$school=="plato", df$school, 'other')
df%>%
group_by(school_category)%>%
summarize_at(c('word_count'), c('min', 'mean', 'max', 'sd'))
ggplot(df%>%filter(df$school=="aristotle"|df$school=="plato"), aes(x =word_count, fill=school_category)) +
geom_bar( position = position_dodge())+
labs(x="Word Count", y="Amount of Word Count")+
theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 1), plot.margin=unit(rep(1,10),'cm'))+
guides(fill=guide_legend(title="School"))
Aristotle_corpus = Corpus(VectorSource(Aristotle$sentence_str))
Aristotle_corpus<-tm_map(Aristotle_corpus, stripWhitespace)
Aristotle_corpus<-tm_map(Aristotle_corpus, content_transformer(tolower))
Aristotle_corpus<-tm_map(Aristotle_corpus, removeWords, stopwords("english"))
Aristotle_corpus<-tm_map(Aristotle_corpus, stemDocument, language = "english")
Aristotle_corpus<-tm_map(Aristotle_corpus, removeWords, character(0))
Aristotle_corpus<-tm_map(Aristotle_corpus, removePunctuation)
Aristotle_tdm_all<-TermDocumentMatrix(Aristotle_corpus)
Aristotle_tdm_tidy=tidy(Aristotle_tdm_all)
Aristotle_tdm_overall=summarise(group_by(Aristotle_tdm_tidy, term), sum(count))
Aristotle_tdm_overall<-rename(Aristotle_tdm_overall, 'count'=`sum(count)`)
Aristotle_tdm_overall<-Aristotle_tdm_overall%>%arrange(desc(count))
Aristotle_tdm_overall$percentage<-Aristotle_tdm_overall$count/sum(Aristotle_tdm_overall$count)
wordcloud(Aristotle_tdm_overall$term, Aristotle_tdm_overall$count,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
Aristotle_tdm_overall[1:50,] %>%
mutate(name = fct_reorder(term, percentage)) %>%
ggplot(aes(x=name, y=percentage)) +
geom_bar(stat="identity", fill="steelblue2", alpha=.8, width=.4) +
coord_flip() +
geom_text(aes(label=paste(round(percentage*100, 3), '%')), vjust=0.5, color="black", size=2.0)+
theme(axis.text.x = element_text(, hjust = 1, vjust = .5))
Aristotle_dtm_tfidf <- DocumentTermMatrix(Aristotle_corpus, control = list(weighting = weightTfIdf))
Aristotle_dtm_tfidf = removeSparseTerms(Aristotle_dtm_tfidf, 0.99)
Aristotle_dtm_tfidf
Aristotle_freq = data.frame(sort(colSums(as.matrix(Aristotle_dtm_tfidf)), decreasing=TRUE))
wordcloud(rownames(Aristotle_freq), Aristotle_freq[,1],
scale=c(3,0.5),
max.words=100,
random.order=FALSE,
random.color=FALSE,
colors=brewer.pal(1, "Dark2"))
Aristotle_freq
Plato_corpus = Corpus(VectorSource(Plato$sentence_str))
Plato_corpus<-tm_map(Plato_corpus, stripWhitespace)
Plato_corpus<-tm_map(Plato_corpus, content_transformer(tolower))
Plato_corpus<-tm_map(Plato_corpus, removeWords, stopwords("english"))
Plato_corpus<-tm_map(Plato_corpus, stemDocument, language = "english")
Plato_corpus<-tm_map(Plato_corpus, removeWords, character(0))
Plato_corpus<-tm_map(Plato_corpus, removePunctuation)
Plato_tdm_all<-TermDocumentMatrix(Plato_corpus)
Plato_tdm_tidy=tidy(Plato_tdm_all)
Plato_tdm_overall=summarise(group_by(Plato_tdm_tidy, term), sum(count))
Plato_tdm_overall<-rename(Plato_tdm_overall, 'count'=`sum(count)`)
Plato_tdm_overall<-Plato_tdm_overall%>%arrange(desc(count))
Plato_tdm_overall$percentage<-Plato_tdm_overall$count/sum(Plato_tdm_overall$count)
wordcloud(Plato_tdm_overall$term, Plato_tdm_overall$count,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
Plato_tdm_overall[1:50,] %>%
mutate(name = fct_reorder(term, percentage)) %>%
ggplot(aes(x=name, y=percentage)) +
geom_bar(stat="identity", fill="steelblue2", alpha=.8, width=.4) +
coord_flip() +
geom_text(aes(label=paste(round(percentage*100, 3), '%')), vjust=0.5, color="black", size=2.0)+
theme(axis.text.x = element_text(, hjust = 1, vjust = .5))
Plato_dtm_tfidf <- DocumentTermMatrix(Plato_corpus, control = list(weighting = weightTfIdf))
Plato_dtm_tfidf = removeSparseTerms(Plato_dtm_tfidf, 0.99)
Plato_dtm_tfidf
Plato_freq = data.frame(sort(colSums(as.matrix(Plato_dtm_tfidf)), decreasing=TRUE))
wordcloud(rownames(Plato_freq), Plato_freq[,1],
scale=c(3,0.5),
max.words=100,
random.order=FALSE,
random.color=FALSE,
colors=brewer.pal(1, "Dark2"))
Plato_freq
library(sentimentr)
Aristotle_sentiment<-sentiment(Aristotle$sentence_str)
Plato_sentiment<-sentiment(Plato$sentence_str)
Aristotle_sentiment_df <- setDF(Aristotle_sentiment)
Plato_sentiment_df <- setDF(Plato_sentiment)
#Function that generates a sentiment class based on sentiment score
get_sentiment_class <- function(sentiment_score) {
sentiment_class = "Positive"
if ( sentiment_score < -0.3) {
sentiment_class = "Negative"
}
else if (sentiment_score < 0.3) {
sentiment_class = "Neutral"
}
sentiment_class
}
#add a sentiment_class attribute
Aristotle_sentiment_df$sentiment_class <-
sapply(Aristotle_sentiment_df$sentiment,get_sentiment_class)
Plato_sentiment_df$sentiment_class <-
sapply(Plato_sentiment_df$sentiment,get_sentiment_class)
Aristotle_sentiment_summary <- count(Aristotle_sentiment_df, sentiment_class)
Aristotle_sentiment_summary$freq<-Aristotle_sentiment_summary$n/sum(Aristotle_sentiment_summary$n)
Plato_sentiment_summary <- count(Plato_sentiment_df, sentiment_class)
Plato_sentiment_summary$freq<-Plato_sentiment_summary$n/sum(Plato_sentiment_summary$n)
par(mfcol=c(1,2), pin = c(3.5,3))
pie(Aristotle_sentiment_summary$freq,
labels=paste(Aristotle_sentiment_summary$sentiment_class, '\n',100*round(Aristotle_sentiment_summary$freq, 3), "%"),
col=brewer.pal(nrow(Aristotle_sentiment_summary), "Blues"),
main='Aristotle Sentiment')
pie(Plato_sentiment_summary$freq,
labels=paste(Plato_sentiment_summary$sentiment_class, '\n', 100*round(Plato_sentiment_summary$freq, 3), "%"),
col=brewer.pal(nrow(Plato_sentiment_summary), "Blues"),
main='Plato Sentiment')
Aristotle_emotion<-emotion_by(Aristotle$sentence_str)
Plato_emotion<-emotion_by(Plato$sentence_str)
Aristotle_emotion_summary=subset(
aggregate(emotion_count  ~ emotion_type ,
Aristotle_emotion, sum),
emotion_count > 0 )
Aristotle_emotion_summary$freq<-Aristotle_emotion_summary$emotion_count/sum(Aristotle_emotion_summary$emotion_count)
Plato_emotion_summary=subset(
aggregate(emotion_count  ~ emotion_type ,
Plato_emotion, sum),
emotion_count > 0 )
Plato_emotion_summary$freq<-Plato_emotion_summary$emotion_count/sum(Plato_emotion_summary$emotion_count)
p1<-ggplot(Aristotle_emotion_summary, aes(x=Aristotle_emotion_summary$emotion_type, y=Aristotle_emotion_summary$freq))+
geom_bar(stat = "identity", fill="steelblue")+
labs(x='Emotion Type', y='Percentage', title = "Aristotle Emotion Summary")+
geom_text(aes(label=paste(round(freq*100, 3), '%')), vjust=1.6, color="white", size=2.0)+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
p2<-ggplot(Plato_emotion_summary, aes(x=Plato_emotion_summary$emotion_type, y=Plato_emotion_summary$freq))+
geom_bar(stat = "identity", fill="steelblue")+
labs(x='Emotion Type', y='Percentage', title = "Plato Emotion Summary")+
geom_text(aes(label=paste(round(freq*100, 3), '%')), vjust=1.6, color="white", size=2.0)+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
p1+p2
View(Plato_emotion_summary)
Plato_emotion_summary$emotion_type
sum(Plato_emotion_summary$emotion_count)
Aristotle_emotion
View(Plato_emotion)
Aristotle_corpus
Plato_tdm_all
Plato_dtm_all<-DocumentTermMatrix(Plato_corpus, control = list(stemming = TRUE, stopwords = TRUE,
minWordLength = 2, removeNumbers = TRUE, removePunctuation = TRUE))
Plato_dtm_all
Aristotle_dtm_all<-DocumentTermMatrix(Aristotle_corpus, control = list(stemming = TRUE, stopwords = TRUE,
minWordLength = 2, removeNumbers = TRUE, removePunctuation = TRUE))
Plato_dtm_all<-DocumentTermMatrix(Plato_corpus, control = list(stemming = TRUE, stopwords = TRUE,
minWordLength = 2, removeNumbers = TRUE, removePunctuation = TRUE))
